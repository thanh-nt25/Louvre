{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { cond, lessThan, multiply, pow, cos, sqrt, sub, add, divide } from \"./base\";\nimport AnimatedBezier from \"./core/AnimatedBezier\";\nvar Easing = function () {\n  function Easing() {\n    _classCallCheck(this, Easing);\n  }\n  _createClass(Easing, null, [{\n    key: \"linear\",\n    value: function linear(t) {\n      return t;\n    }\n  }, {\n    key: \"ease\",\n    value: function ease(t) {\n      return new AnimatedBezier(t, 0.42, 0, 1, 1);\n    }\n  }, {\n    key: \"quad\",\n    value: function quad(t) {\n      return multiply(t, t);\n    }\n  }, {\n    key: \"cubic\",\n    value: function cubic(t) {\n      return multiply(t, t, t);\n    }\n  }, {\n    key: \"poly\",\n    value: function poly(n) {\n      return function (t) {\n        return pow(t, n);\n      };\n    }\n  }, {\n    key: \"sin\",\n    value: function sin(t) {\n      return sub(1, cos(multiply(t, Math.PI, 0.5)));\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(t) {\n      return sub(1, sqrt(sub(1, multiply(t, t))));\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(t) {\n      return pow(2, multiply(10, sub(t, 1)));\n    }\n  }, {\n    key: \"elastic\",\n    value: function elastic() {\n      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var p = bounciness * Math.PI;\n      return function (t) {\n        return sub(1, multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p))));\n      };\n    }\n  }, {\n    key: \"back\",\n    value: function back(s) {\n      if (s === undefined) {\n        s = 1.70158;\n      }\n      return function (t) {\n        return multiply(t, t, sub(multiply(add(s, 1), t), s));\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce(t) {\n      var sq = function sq(v) {\n        return multiply(7.5625, v, v);\n      };\n      return cond(lessThan(t, 1 / 2.75), sq(t), cond(lessThan(t, 2 / 2.75), add(0.75, sq(sub(t, 1.5 / 2.75))), cond(lessThan(t, 2.5 / 2.76), add(0.9375, sq(sub(t, 2.25 / 2.75))), add(0.984375, sq(sub(t, 2.625 / 2.75))))));\n    }\n  }, {\n    key: \"bezier\",\n    value: function bezier(x1, y1, x2, y2) {\n      return function (t) {\n        return new AnimatedBezier(t, x1, y1, x2, y2);\n      };\n    }\n  }, {\n    key: \"in\",\n    value: function _in(easing) {\n      return easing;\n    }\n  }, {\n    key: \"out\",\n    value: function out(easing) {\n      return function (t) {\n        return sub(1, easing(sub(1, t)));\n      };\n    }\n  }, {\n    key: \"inOut\",\n    value: function inOut(easing) {\n      return function (t) {\n        return cond(lessThan(t, 0.5), divide(easing(multiply(t, 2)), 2), sub(1, divide(easing(multiply(sub(1, t), 2)), 2)));\n      };\n    }\n  }]);\n  return Easing;\n}();\nexport { Easing as default };","map":{"version":3,"names":["cond","lessThan","multiply","pow","cos","sqrt","sub","add","divide","AnimatedBezier","Easing","_classCallCheck","_createClass","key","value","linear","t","ease","quad","cubic","poly","n","sin","Math","PI","circle","exp","elastic","bounciness","arguments","length","undefined","p","back","s","bounce","sq","v","bezier","x1","y1","x2","y2","_in","easing","out","inOut","default"],"sources":["C:/Users/Admin/Code/git clone/EThrift/client/node_modules/react-native-reanimated/lib/reanimated1/Easing.js"],"sourcesContent":["import {\r\n  cond,\r\n  lessThan,\r\n  multiply,\r\n  pow,\r\n  cos,\r\n  sqrt,\r\n  sub,\r\n  add,\r\n  divide,\r\n} from './base';\r\nimport AnimatedBezier from './core/AnimatedBezier';\r\n\r\n/**\r\n * The `Easing` module implements common easing functions. This module is used\r\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\r\n * believable motion in animations.\r\n *\r\n * You can find a visualization of some common easing functions at\r\n * http://easings.net/\r\n *\r\n * ### Predefined animations\r\n *\r\n * The `Easing` module provides several predefined animations through the\r\n * following methods:\r\n *\r\n * - [`back`](docs/easing.html#back) provides a simple animation where the\r\n *   object goes slightly back before moving forward\r\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\r\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\r\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\r\n *\r\n * ### Standard functions\r\n *\r\n * Three standard easing functions are provided:\r\n *\r\n * - [`linear`](docs/easing.html#linear)\r\n * - [`quad`](docs/easing.html#quad)\r\n * - [`cubic`](docs/easing.html#cubic)\r\n *\r\n * The [`poly`](docs/easing.html#poly) function can be used to implement\r\n * quartic, quintic, and other higher power functions.\r\n *\r\n * ### Additional functions\r\n *\r\n * Additional mathematical functions are provided by the following methods:\r\n *\r\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\r\n * - [`circle`](docs/easing.html#circle) provides a circular function\r\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\r\n * - [`exp`](docs/easing.html#exp) provides an exponential function\r\n *\r\n * The following helpers are used to modify other easing functions.\r\n *\r\n * - [`in`](docs/easing.html#in) runs an easing function forwards\r\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\r\n * - [`out`](docs/easing.html#out) runs an easing function backwards\r\n */\r\nexport default class Easing {\r\n  /**\r\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\r\n   * one.\r\n   *\r\n   * http://cubic-bezier.com/#0,0,1,1\r\n   */\r\n  static linear(t) {\r\n    return t;\r\n  }\r\n\r\n  /**\r\n   * A simple inertial interaction, similar to an object slowly accelerating to\r\n   * speed.\r\n   *\r\n   * http://cubic-bezier.com/#.42,0,1,1\r\n   */\r\n  static ease(t) {\r\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\r\n  }\r\n\r\n  /**\r\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\r\n   * time.\r\n   *\r\n   * http://easings.net/#easeInQuad\r\n   */\r\n  static quad(t) {\r\n    return multiply(t, t);\r\n  }\r\n\r\n  /**\r\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\r\n   * time.\r\n   *\r\n   * http://easings.net/#easeInCubic\r\n   */\r\n  static cubic(t) {\r\n    return multiply(t, t, t);\r\n  }\r\n\r\n  /**\r\n   * A power function. Position is equal to the Nth power of elapsed time.\r\n   *\r\n   * n = 4: http://easings.net/#easeInQuart\r\n   * n = 5: http://easings.net/#easeInQuint\r\n   */\r\n  static poly(n) {\r\n    return (t) => pow(t, n);\r\n  }\r\n\r\n  /**\r\n   * A sinusoidal function.\r\n   *\r\n   * http://easings.net/#easeInSine\r\n   */\r\n  static sin(t) {\r\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\r\n  }\r\n\r\n  /**\r\n   * A circular function.\r\n   *\r\n   * http://easings.net/#easeInCirc\r\n   */\r\n  static circle(t) {\r\n    return sub(1, sqrt(sub(1, multiply(t, t))));\r\n  }\r\n\r\n  /**\r\n   * An exponential function.\r\n   *\r\n   * http://easings.net/#easeInExpo\r\n   */\r\n  static exp(t) {\r\n    return pow(2, multiply(10, sub(t, 1)));\r\n  }\r\n\r\n  /**\r\n   * A simple elastic interaction, similar to a spring oscillating back and\r\n   * forth.\r\n   *\r\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\r\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\r\n   * times.\r\n   *\r\n   * http://easings.net/#easeInElastic\r\n   */\r\n  static elastic(bounciness = 1) {\r\n    const p = bounciness * Math.PI;\r\n    return (t) =>\r\n      sub(\r\n        1,\r\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Use with `Animated.parallel()` to create a simple effect where the object\r\n   * animates back slightly as the animation starts.\r\n   *\r\n   * Wolfram Plot:\r\n   *\r\n   * - http://tiny.cc/back_default (s = 1.70158, default)\r\n   */\r\n  static back(s) {\r\n    if (s === undefined) {\r\n      s = 1.70158;\r\n    }\r\n    return (t) => multiply(t, t, sub(multiply(add(s, 1), t), s));\r\n  }\r\n\r\n  /**\r\n   * Provides a simple bouncing effect.\r\n   *\r\n   * http://easings.net/#easeInBounce\r\n   */\r\n  static bounce(t) {\r\n    const sq = (v) => multiply(7.5625, v, v);\r\n    return cond(\r\n      lessThan(t, 1 / 2.75),\r\n      sq(t),\r\n      cond(\r\n        lessThan(t, 2 / 2.75),\r\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\r\n        cond(\r\n          lessThan(t, 2.5 / 2.76),\r\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\r\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\r\n   * `transition-timing-function`.\r\n   *\r\n   * A useful tool to visualize cubic bezier curves can be found at\r\n   * http://cubic-bezier.com/\r\n   */\r\n  static bezier(x1, y1, x2, y2) {\r\n    return (t) => new AnimatedBezier(t, x1, y1, x2, y2);\r\n  }\r\n\r\n  /**\r\n   * Runs an easing function forwards.\r\n   */\r\n  static in(easing) {\r\n    return easing;\r\n  }\r\n\r\n  /**\r\n   * Runs an easing function backwards.\r\n   */\r\n  static out(easing) {\r\n    return (t) => sub(1, easing(sub(1, t)));\r\n  }\r\n\r\n  /**\r\n   * Makes any easing function symmetrical. The easing function will run\r\n   * forwards for half of the duration, then backwards for the rest of the\r\n   * duration.\r\n   */\r\n  static inOut(easing) {\r\n    return (t) =>\r\n      cond(\r\n        lessThan(t, 0.5),\r\n        divide(easing(multiply(t, 2)), 2),\r\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\r\n      );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}