{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 8149384316327;\n          _f.__location = \"C:\\\\Users\\\\Admin\\\\Code\\\\git clone\\\\EThrift\\\\client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (8:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 1117524627396;\n          _f.__location = \"C:\\\\Users\\\\Admin\\\\Code\\\\git clone\\\\EThrift\\\\client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (17:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 16579675743275;\n          _f.__location = \"C:\\\\Users\\\\Admin\\\\Code\\\\git clone\\\\EThrift\\\\client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (26:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.END);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 13760866678247;\n          _f.__location = \"C:\\\\Users\\\\Admin\\\\Code\\\\git clone\\\\EThrift\\\\client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (35:11)\";\n          return _f;\n        }()\n      };\n    };\n    _f._closure = {\n      Reanimated: Reanimated,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      }\n    };\n    _f.asString = \"function create(handlerTag){const{Reanimated,State}=jsThis._closure;{return{begin:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},activate:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},fail:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},end:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}};}}\";\n    _f.__workletHash = 5319495435492;\n    _f.__location = \"C:\\\\Users\\\\Admin\\\\Code\\\\git clone\\\\EThrift\\\\client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n    return _f;\n  }()\n};","map":{"version":3,"names":["Reanimated","State","GestureStateManager","create","_f","handlerTag","begin","setGestureState","BEGAN","console","warn","_closure","asString","__workletHash","__location","activate","ACTIVE","fail","FAILED","end","END"],"sources":["C:\\Users\\Admin\\Code\\git clone\\EThrift\\client\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}