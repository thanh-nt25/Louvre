{"ast":null,"code":"var Reanimated;\ntry {\n  Reanimated = require('react-native-reanimated');\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = function () {\n      var _f = function _f() {\n        console.warn('Please use newer version of react-native-reanimated in order to control state of the gestures.');\n      };\n      _f._closure = {};\n      _f.asString = \"function _f(){console.warn('Please use newer version of react-native-reanimated in order to control state of the gestures.');}\";\n      _f.__workletHash = 15383122326439;\n      _f.__location = \"C:\\\\Users\\\\Admin\\\\Code\\\\git clone\\\\EThrift\\\\client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\reanimatedWrapper.js (7:33)\";\n      return _f;\n    }();\n  }\n} catch (e) {}\nexport { Reanimated };","map":{"version":3,"names":["Reanimated","require","setGestureState","_f","console","warn","_closure","asString","__workletHash","__location","e"],"sources":["C:\\Users\\Admin\\Code\\git clone\\EThrift\\client\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\reanimatedWrapper.ts"],"sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated: {\n  default: {\n    // Slightly modified definition copied from 'react-native-reanimated'\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    createAnimatedComponent<P extends object>(\n      component: ComponentClass<P>,\n      options?: unknown\n    ): ComponentClass<P>;\n  };\n  useEvent: (\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n    events: string[],\n    rebuild: boolean\n  ) => unknown;\n  useSharedValue: <T>(value: T) => SharedValue<T>;\n  setGestureState: (handlerTag: number, newState: number) => void;\n};\n\ntry {\n  Reanimated = require('react-native-reanimated');\n\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = () => {\n      'worklet';\n      console.warn(\n        'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n      );\n    };\n  }\n  // When 'react-native-reanimated' is not available we want to\n  // quietly continue\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nexport { Reanimated };\n"],"mappings":"AAUA,IAAIA,UAAJ;AAkBA,IAAI;EACFA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAApB;EAEA,IAAI,CAACD,UAAU,CAACE,eAAhB,EAAiC;IAC/BF,UAAU,CAACE,eAAX;MAAA,IAAAC,EAAA,YAAAA,GAAA,EAAmC;QAEjCC,OAAO,CAACC,IAAR,CACE,gGADF;MAGD,CALD;MAAAF,EAAA,CAAAG,QAAA;MAAAH,EAAA,CAAAI,QAAA;MAAAJ,EAAA,CAAAK,aAAA;MAAAL,EAAA,CAAAM,UAAA;MAAA,OAAAN,EAAA;IAAA;EAMD;AAIF,CAdD,CAcE,OAAOO,CAAP,EAAU,CAAE;AAEd,SAASV,UAAT"},"metadata":{},"sourceType":"module","externalDependencies":[]}