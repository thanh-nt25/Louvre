{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar gestureInstances = 0;\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n    _classCallCheck(this, GestureHandler);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"isGestureRunning\", false);\n    _defineProperty(this, \"view\", null);\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n    _defineProperty(this, \"hasGestureFailed\", false);\n    _defineProperty(this, \"hammer\", null);\n    _defineProperty(this, \"initialRotation\", null);\n    _defineProperty(this, \"__initialX\", void 0);\n    _defineProperty(this, \"__initialY\", void 0);\n    _defineProperty(this, \"config\", {});\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n    _defineProperty(this, \"pendingGestures\", {});\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"gestureInstance\", void 0);\n    _defineProperty(this, \"_stillWaiting\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    });\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n        _this.hammer.destroy();\n      }\n      _this.hammer = null;\n    });\n    _defineProperty(this, \"isPointInView\", function (_ref) {\n      var x = _ref.x,\n        y = _ref.y;\n      var rect = _this.view.getBoundingClientRect();\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n        onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n        onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n      var event = _this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n      if (!gesture) return;\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n          _this._stillWaiting = _this._getPendingGestures();\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture2 = _step2.value;\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n            return false;\n          }\n        }\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n            deltaRotation: deltaRotation\n          })),\n          success = _this$isGestureEnable.success,\n          failed = _this$isGestureEnable.failed;\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n          _this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      var params = _this.getHammerConfig();\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    });\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this.gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n        enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n        props = _objectWithoutProperties(_ref2, _excluded);\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n        numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n        _this2.onRawEvent(ev);\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n        deltaY = _ref4.deltaY,\n        rotation = _ref4.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }]);\n  return GestureHandler;\n}();\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n          if (Array.isArray(argMapping)) {\n            for (var _iterator4 = _createForOfIteratorHelperLoose(argMapping.entries()), _step4; !(_step4 = _iterator4()).done;) {\n              var _ref6 = _step4.value;\n              var _ref7 = _slicedToArray(_ref6, 2);\n              var index = _ref7[0];\n              var _ref7$ = _slicedToArray(_ref7[1], 2);\n              var key = _ref7$[0];\n              var value = _ref7$[1];\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref8) {\n      var handlerTag = _ref8.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nexport default GestureHandler;","map":{"version":3,"names":["Hammer","findNodeHandle","State","EventMap","NodeManager","gestureInstances","GestureHandler","_this","_classCallCheck","_defineProperty","UNDETERMINED","Array","isArray","config","waitFor","_iterator","_createForOfIteratorHelperLoose","_step","done","gesture","value","removePendingGesture","id","clearSelfAsPending","hammer","stop","destroy","_ref","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","_this$propsRef$curren","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","lastSentState","state","get","name","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","_iterator2","_step2","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","_this$isGestureEnable","isGestureEnabledForEvent","getConfig","_objectSpread","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","_createClass","key","Error","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","updateHasCustomActivationCriteria","updateGestureConfig","_ref2","_ref2$enabled","props","_objectWithoutProperties","_excluded","ensureConfig","_iterator3","_step3","sync","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","_i","_Object$values","Object","values","cancelEvent","notifyPendingGestures","_i2","_Object$values2","onGestureEnded","forceInvalidate","sendEvent","INPUT_CANCEL","isFinal","onRawEvent","_ref3","isFirst","setView","_this2","Manager","NativeGestureClass","add","on","ev","setTimeout","setupEvents","_this3","onStart","onGestureActivated","_ref4","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","_ref5","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","_iterator4","entries","_step4","_ref6","_ref7","_slicedToArray","index","_ref7$","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_ref8","getHandler","v","configProps","forEach","prop","Number","NaN"],"sources":["C:\\Users\\Admin\\Code\\git clone\\EThrift\\client\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}