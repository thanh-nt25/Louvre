{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tintColor\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { DrawerActions, useNavigation } from '@react-navigation/native';\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function DrawerToggleButton(_ref) {\n  var tintColor = _ref.tintColor,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var navigation = useNavigation();\n  return React.createElement(PlatformPressable, _extends({}, rest, {\n    accessible: true,\n    accessibilityRole: \"button\",\n    android_ripple: {\n      borderless: true\n    },\n    onPress: function onPress() {\n      return navigation.dispatch(DrawerActions.toggleDrawer());\n    },\n    style: styles.touchable,\n    hitSlop: Platform.select({\n      ios: undefined,\n      default: {\n        top: 16,\n        right: 16,\n        bottom: 16,\n        left: 16\n      }\n    })\n  }), React.createElement(Image, {\n    style: [styles.icon, tintColor ? {\n      tintColor: tintColor\n    } : null],\n    source: require(\"./assets/toggle-drawer-icon.png\"),\n    fadeDuration: 0\n  }));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain'\n  },\n  touchable: {\n    marginHorizontal: 11\n  }\n});","map":{"version":3,"names":["PlatformPressable","DrawerActions","useNavigation","React","Image","Platform","StyleSheet","DrawerToggleButton","_ref","tintColor","rest","_objectWithoutProperties","_excluded","navigation","createElement","_extends","accessible","accessibilityRole","android_ripple","borderless","onPress","dispatch","toggleDrawer","style","styles","touchable","hitSlop","select","ios","undefined","default","top","right","bottom","left","icon","source","require","fadeDuration","create","height","width","margin","resizeMode","marginHorizontal"],"sources":["C:\\Users\\Admin\\Code\\git clone\\EThrift\\client\\node_modules\\@react-navigation\\drawer\\lib\\module\\views\\DrawerToggleButton.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  ParamListBase,\n  useNavigation,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, Platform, StyleSheet } from 'react-native';\n\nimport type { DrawerNavigationProp } from '../types';\n\ntype Props = {\n  accessibilityLabel?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  tintColor?: string;\n};\n\nexport default function DrawerToggleButton({ tintColor, ...rest }: Props) {\n  const navigation = useNavigation<DrawerNavigationProp<ParamListBase>>();\n\n  return (\n    <PlatformPressable\n      {...rest}\n      accessible\n      accessibilityRole=\"button\"\n      android_ripple={{ borderless: true }}\n      onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}\n      style={styles.touchable}\n      hitSlop={Platform.select({\n        ios: undefined,\n        default: { top: 16, right: 16, bottom: 16, left: 16 },\n      })}\n    >\n      <Image\n        style={[styles.icon, tintColor ? { tintColor } : null]}\n        source={require('./assets/toggle-drawer-icon.png')}\n        fadeDuration={0}\n      />\n    </PlatformPressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n  },\n  touchable: {\n    marginHorizontal: 11,\n  },\n});\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SACEC,aADF,EAGEC,aAHF,QAIO,0BAJP;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,KAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAYA,eAAe,SAASC,kBAATA,CAAAC,IAAA,EAA2D;EAAA,IAA7BC,SAAF,GAA+BD,IAAA,CAA7BC,SAAF;IAAgBC,IAAA,GAAAC,wBAAA,CAAeH,IAAA,EAAAI,SAAA;EACxE,IAAMC,UAAU,GAAGX,aAAa,EAAhC;EAEA,OACEC,KAAA,CAAAW,aAAA,CAACd,iBAAD,EAAAe,QAAA,KACML,IADN;IAEEM,UAAU,MAFZ;IAGEC,iBAAiB,EAAC,QAHpB;IAIEC,cAAc,EAAE;MAAEC,UAAU,EAAE;IAAd,CAJlB;IAKEC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAMP,UAAU,CAACQ,QAAX,CAAoBpB,aAAa,CAACqB,YAAd,EAApB,CALjB;IAAA;IAMEC,KAAK,EAAEC,MAAM,CAACC,SANhB;IAOEC,OAAO,EAAErB,QAAQ,CAACsB,MAAT,CAAgB;MACvBC,GAAG,EAAEC,SADkB;MAEvBC,OAAO,EAAE;QAAEC,GAAG,EAAE,EAAP;QAAWC,KAAK,EAAE,EAAlB;QAAsBC,MAAM,EAAE,EAA9B;QAAkCC,IAAI,EAAE;MAAxC;IAFc,CAAhB;EAPX,IAYE/B,KAAA,CAAAW,aAAA,CAACV,KAAD;IACEmB,KAAK,EAAE,CAACC,MAAM,CAACW,IAAR,EAAc1B,SAAS,GAAG;MAAEA,SAAA,EAAAA;IAAF,CAAH,GAAmB,IAA1C,CADT;IAEE2B,MAAM,EAAEC,OAAO,mCAFjB;IAGEC,YAAY,EAAE;EAHhB,EAZF,CADF;AAoBD;AAED,IAAMd,MAAM,GAAGlB,UAAU,CAACiC,MAAX,CAAkB;EAC/BJ,IAAI,EAAE;IACJK,MAAM,EAAE,EADJ;IAEJC,KAAK,EAAE,EAFH;IAGJC,MAAM,EAAE,CAHJ;IAIJC,UAAU,EAAE;EAJR,CADyB;EAO/BlB,SAAS,EAAE;IACTmB,gBAAgB,EAAE;EADT;AAPoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}